Code:
Import pandas pd
Lead the dataset
df-pd.read_csv("C:\Users\Admin\Dowmloads\archive\student-par.csv")
efine the number samples and sample size
num samples-30
sample Size-int(0.1"len (df))
#store means of each sample
sample_means[]
#Generate multiple sample and calculate mean
for i in range(num_samples):
sample-df.sample(n-sample_Size,random_state-i)
sample_mean-sample.mean(numeric_only-True)
sample means.append(sample_mean)
#Convert result to a dataset
sample_means_df-pd.DataFrame (sample_means)
Display the means of each sample
print(sample_means_df)


Problem Statement: Data is often incomplete and contains missing values. The 
challenge is to clean, process, and analyze data efficiently using Pandas 
functionalities to extract insights. 
''' 
Program: 
import numpy as np 
import pandas as pd 
# Sample dataset 
raw_data = { 
'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', np.nan], 
'Age': [25, 30, 35, np.nan, 28, 40], 
'Salary': [50000, 60000, np.nan, 70000, 55000, 65000], 
'Department': ['HR', 'IT', 'IT', 'Finance', 'HR', np.nan] 
} 
df = pd.DataFrame(raw_data) 
# Display original dataset print("Original Data:") 
print(df) 
# Data Cleaning 
# 1. Remove rows where 'Name' is missing 
df.dropna(subset=['Name'], inplace=True) 
# 2. Fill missing values in 'Age' with the column mean 
df['Age'].fillna(df['Age'].mean(), inplace=True) 
# 3. Fill missing values in 'Salary' with the column median 
df['Salary'].fillna(df['Salary'].median(), inplace=True) 
# 4. Fill missing values in 'Department' with 'Unknown' 
df['Department'].fillna('Unknown', inplace=True) 
# Display cleaned dataset 
print("\nCleaned Data:") print(df) 
# Data Analysis 
# 1. Summary Statistics 
print("\nSummary Statistics:") print(df.describe()) 
# 2. Average Salary per Department 
print("\nAverage Salary per Department:") print(df.groupby('Department')['Salary'].mean()) 
# 3. Count of Employees per Department 
print("\nEmployee Count per Department:") print(df['Department'].value_counts()) 
# 4. Maximum and Minimum Salary print("\nMaximum Salary:", df['Salary'].max()) 
print("Minimum Salary:", df['Salary'].min())


7)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
filepath = r'C:\Users\Varun\Desktop\endsem sem 3\score.csv'
df=pd.read_csv(filepath)
df.head()
x=df.Hours
y=df.Scores
x_label='Hours'
y_label='Scores'
plt.xlabel(x_label)
plt.ylabel(y_label)
plt.scatter(x,y)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state=0)
r2=r2_score(y_test,y_pred)
r2
model = LinearRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
plt.title(f'Hours vs Scores (r2={r2:.2f})')
plt.scatter(x_test, y_test,label='Scatter')
plt.plot(x_test, y_pred, color='yellow',label='LinearRegression')
plt.xlabel('Scores')
plt.ylabel('Hours')
plt.legend()


8.Problem statement : Design a python program for clustering analysis. Allow users to input a 
dataset and choose a clustering algorithm. Implement the selected algorithm, visualize the 
clusters and provide output into grouping pattern using data.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler 
from sklearn.decomposition import PCA
def load_dataset(file_path): 
"""Load dataset from CSV file.""" 
try:
df = pd.read_csv(file_path) 
print("\nDataset loaded successfully!")
print(f"Available columns: {list(df.columns)}\n") 
return df
except Exception as e:
print(f"Error loading CSV file: {e}") 
return None
def perform_kmeans_clustering(data, num_clusters): 
"""Performs K-Means clustering."""
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)
kmeans = KMeans(n_clusters=num_clusters, random_state=42) 
clusters = kmeans.fit_predict(scaled_data)
data['Cluster'] = clusters 
return data, kmeans
def visualize_clusters(data, num_clusters):
"""Visualize clusters using PCA (for dimensionality reduction).""" 
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(data.drop(columns=['Cluster'])) 
data['PCA1'], data['PCA2'] = reduced_data[:, 0], reduced_data[:, 1]
plt.figure(figsize=(8, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', data=data, palette='viridis', s=100, 
alpha=0.8)
plt.title(f'K-Means Clustering with {num_clusters} Clusters') 
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2') 
plt.legend(title='Cluster') 
plt.show()
def main():
file_path = 'C:\\Users\\ADMIN\\OneDrive\\Desktop\\SEM4\\DAP_LAB\\sample_data.csv' 
df = load_dataset(file_path)
if df is None: 
return
print("\nChoose the features for clustering (comma-separated):") 
selected_features = input().split(',')
selected_features = [f.strip() for f in selected_features]
if not all(feature in df.columns for feature in selected_features): 
print("Invalid feature selection!")
return
num_clusters = int(input("\nEnter the number of clusters (K): ").strip())
clustered_data, kmeans = perform_kmeans_clustering(df[selected_features], num_clusters) 
print("\nCluster Centers:")
print(pd.DataFrame(kmeans.cluster_centers_, columns=selected_features))
print("\nClustered Data:")
print(clustered_data[['Cluster'] + selected_features].head()) 
visualize_clusters(clustered_data, num_clusters)
main()



9.Problem Statement: Develop a python program for hypotheses testing, focusing on comparing 
means of two samples. Implement a statistical test such as t test or z test to analyse whether 
there is significant diff between the means
import numpy as np 
import scipy.stats as stats
def z_test(sample1, sample2, sigma1, sigma2, alpha=0.05): 
mean1 = np.mean(sample1)
mean2 = np.mean(sample2) 
n1 = len(sample1)
n2 = len(sample2)
se = np.sqrt((sigma1**2 / n1) + (sigma2**2 / n2)) 
z_statistic = (mean1 - mean2) / se
z_critical = stats.norm.ppf(1 - alpha / 2) 
print(f"Z-statistic: {z_statistic}")
print(f"Z-critical (two-tailed): {z_critical}") 
if abs(z_statistic) > z_critical:
print("We reject the null hypothesis: The means are significantly different.") 
else:
print("We fail to reject the null hypothesis: No significant difference between the means.")
sample1 = [80, 85, 90, 92, 88, 76, 95, 91, 85, 87]
sample2 = [78, 82, 79, 81, 85, 77, 80, 82, 86, 83]
sigma1 = 5
sigma2 = 5
z_test(sample1, sample2, sigma1, sigma2)



10.Problem Statement: Develop a Python program for hypothesis testing, focusing on 
comparing means of two samples and multiple groups using ANOVA. Implement statistical tests 
such as t-test and ANOVA to analyze whether there is a significant difference between the 
means. The program should handle different scenarios where a t-test is required for two 
samples, and ANOVA is needed for more than two groups.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
from scipy.stats import ttest_ind, f_oneway
def load_dataset(file_path): 
"""Load dataset from CSV file.""" 
try:
df = pd.read_csv(file_path) 
print("\nDataset loaded successfully!")
print(f"Available columns: {list(df.columns)}\n") 
return df
except Exception as e:
print(f"Error loading CSV file: {e}") 
return None
def perform_t_test(group1, group2):
"""Performs an independent t-test for two samples.""" 
stat, p_value = ttest_ind(group1, group2)
print("\nT-Test Results:")
print(f"T-statistic: {stat:.4f}, P-value: {p_value:.4f}")
if p_value < 0.05:
print("Conclusion: There is a significant difference between the two groups.") 
else:
print("Conclusion: No significant difference found between the two groups.")
def perform_anova(groups):
"""Performs ANOVA for multiple groups.""" 
stat, p_value = f_oneway(*groups) 
print("\nANOVA Results:")
print(f"F-statistic: {stat:.4f}, P-value: {p_value:.4f}")
if p_value < 0.05:
print("Conclusion: There is a significant difference between at least two groups.") 
else:
print("Conclusion: No significant difference found between the groups.")
def visualize_groups(data, group_column, value_column): 
"""Visualize the data using a box plot.""" 
plt.figure(figsize=(8, 6))
sns.boxplot(x=group_column, y=value_column, data=data) 
plt.title("Group Comparison")
plt.xlabel(group_column) 
plt.ylabel(value_column) 
plt.show()
def main():
file_path = 'C:\\Users\\ADMIN\\OneDrive\\Desktop\\SEM4\\DAP_LAB\\annova.csv' 
df = load_dataset(file_path)
if df is None: 
return
# User selects categorical column (grouping variable) and numerical column (value) 
print("\nChoose the categorical column (grouping variable):")
group_column = input().strip()
print("\nChoose the numerical column for comparison:") 
value_column = input().strip()
if group_column not in df.columns or value_column not in df.columns: 
print("Invalid column selection!")
return
# Extract groups
grouped_data = df.groupby(group_column)[value_column].apply(list)
if len(grouped_data) == 2:
# Perform T-test if there are exactly two groups 
perform_t_test(*grouped_data)
elif len(grouped_data) > 2:
# Perform ANOVA if more than two groups exist 
perform_anova(grouped_data)
else:
print("Not enough groups for comparison!") 
# Visualize the data
visualize_groups(df, group_column, value_column) 
main()
